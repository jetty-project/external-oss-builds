#!groovy
pipeline {
  agent { node { label 'linux' } }
  environment{
    GRADLE_HOME = fileExists "$HOME/.gradle"
  }
  options {
    buildDiscarder logRotator( numToKeepStr: '20' )
  }
  parameters {
    string( defaultValue: '9.4.29-SNAPSHOT', description: 'Jetty version to use to build SpringBoot project',
            name: 'JETTY_VERSION' )
    string( defaultValue: 'jdk8', description: 'JDK to use (jdk8,jdk11,jdk14)', name: 'JDK' )
    string( defaultValue: 'spring-projects', description: 'github org to use', name: 'GITHUB_ORG' )
    string( defaultValue: '2.2.x', description: 'springboot branch', name: 'SPRINGBOOT_BRANCH' )
  }
  stages {
    stage('Create Gradle home'){
      when { expression { GRADLE_HOME == 'false' } }
      steps {
        sh "mkdir $HOME/.gradle"
      }
    }
    stage("Checkout SpringBoot"){
      steps{
        stash name: 'init.gradle.spring-framework', includes: 'init.gradle.spring-framework'
        git url: "https://github.com/${GITHUB_ORG}/spring-boot.git", branch: "${SPRINGBOOT_BRANCH}"
      }
    }
    stage("Build SpringBoot"){
      steps{
          getBuild("${SPRINGBOOT_BRANCH}", "$jdk")
      }
      post {
        always {
          script{
            currentBuild.description = "Build SpringBoot branch ${GITHUB_ORG}/${SPRINGBOOT_BRANCH}, Jetty Version ${JETTY_VERSION}, jdk ${jdk}"
          }
          junit testResults: '**/target/surefire-reports/*.xml', allowEmptyResults: true
          archiveArtifacts artifacts: "spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/build/reports/**", allowEmptyArchive: true
          publishHTML( [allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: "${env.WORKSPACE}/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/build/reports/tests/test/", reportFiles: 'index.html', reportName: 'Build Report', reportTitles: ''] )

        }
      }
    }
  }
}

def getBuild(branch,jdk){
  if(branch=='master'){
    withEnv(["JAVA_HOM=${ tool "$jdk" }", "PATH+GRADE=${ tool '6.4' }"]) {
      configFileProvider([configFile(fileId: 'init.gradle', variable: 'INIT_GRADLE')]) {
          sh "cp $INIT_GRADLE $HOME/.gradle/init.gradle"
          unstash name: 'init.gradle.spring-framework'
          sh "ls -lrt"
          sh './gradlew clean test jar --info --no-daemon --init-script init.gradle.spring-framework'
        }
      }
  } else {
    withEnv(["JAVA_HOME=${ tool "$jdk" }","PATH+GRADLE=${ tool '6.4' }"]) {
      withMaven( maven: 'maven3',
                 jdk: "$jdk",
                 publisherStrategy: 'EXPLICIT',
                 mavenOpts: '-Xms4g -Xmx8g' ) {
        sh "./mvnw -V -B -U clean install -Dmaven.test.failure.ignore=true -Dgradle.task=assemble -Ddep.jetty.version=${JETTY_VERSION}"
      }
    }
  }
}
