#!groovy
pipeline {
  agent { node { label 'linux' } }
  environment{
    GRADLE_HOME = fileExists "$HOME/.gradle"
  }
  options {
    buildDiscarder logRotator( numToKeepStr: '20' )
  }
  parameters {
    string( defaultValue: '12.0.16', description: 'Jetty version to use to build SpringBoot project',
            name: 'JETTY_VERSION' )
    string( defaultValue: 'jdk21', description: 'JDK to use (jdk17,jdk21)', name: 'JDK' )
    string( defaultValue: 'spring-projects', description: 'github org to use', name: 'GITHUB_ORG' )
    string( defaultValue: 'main', description: 'springboot branch, main, 3.4.x', name: 'SPRINGBOOT_BRANCH' )
    string( defaultValue: '4.0.9', description: 'Jetty Reactive HttpClient version to use in the build',
            name: 'JETTY_REACTIVE_HTTPCLIENT_VERSION' )
  }
  stages {
    stage('Create Gradle home'){
      when { expression { GRADLE_HOME == 'false' } }
      steps {
        sh "mkdir $HOME/.gradle"
      }
    }
    stage("Checkout SpringBoot"){
      steps{
        stash name: 'init.gradle.spring-framework', includes: 'init.gradle.spring-framework'
        checkout([$class: 'GitSCM',
                  branches: [[name: "*/$SPRINGBOOT_BRANCH"]],
                  extensions: [[$class: 'CloneOption', depth: 1, noTags: true, shallow: true]],
                  userRemoteConfigs: [[url: 'https://github.com/${GITHUB_ORG}/spring-boot.git']]])           
      }
    }
    stage("Build SpringBoot"){
      steps{
          getBuild("${SPRINGBOOT_BRANCH}", "$jdk")
      }
      post {
        always {
          script{
            currentBuild.description = "Build SpringBoot branch ${GITHUB_ORG}/${SPRINGBOOT_BRANCH}, Jetty Version ${JETTY_VERSION}, jdk ${jdk}"
          }
          junit testResults: '**/build/test-results/test/*.xml', allowEmptyResults: true
          archiveArtifacts artifacts: "spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/build/reports/**", allowEmptyArchive: true
          publishHTML( [allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true,
                        reportDir: "buildSrc/build/reports/tests/test",
                        reportFiles: 'index.html', reportName: 'Build Report', reportTitles: ''] )

        }
      }
    }
  }
}

def getBuild(branch,jdk){
  if(branch=='2.2.x'){
    withEnv(["JAVA_HOME=${ tool "$jdk" }"]) {
      withMaven( maven: 'maven3',
                 jdk: "$jdk",
                 publisherStrategy: 'EXPLICIT',
                 mavenOpts: '-Xms4g -Xmx8g' ) {
        sh "./mvnw -V -B -U clean install -Dmaven.test.failure.ignore=true -Dgradle.task=assemble -Djetty.version=${JETTY_VERSION}"
      }
    }
  } else {
    withEnv(["JAVA_HOME=${ tool "$jdk" }"]) {
      configFileProvider([configFile(fileId: 'init.gradle', variable: 'INIT_GRADLE')]) {
        sh "cp $INIT_GRADLE $HOME/.gradle/init.gradle"
        sh 'echo "org.gradle.jvmargs=-Xmx4g -Xms1g -XX:MaxMetaspaceSize=512m -Dfile.encoding=UTF-8" >> gradle.properties'
        unstash name: 'init.gradle.spring-framework'
        sh "./gradlew build --info --no-daemon --no-build-cache --init-script init.gradle.spring-framework -Djetty.version=${JETTY_VERSION} -Djetty.reactive.httpclient=${JETTY_REACTIVE_HTTPCLIENT_VERSION}"
      }
    }
  }
}
