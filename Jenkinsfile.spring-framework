#!groovy
pipeline {
  agent { node { label 'linux' } }
  environment{
    GRADLE_HOME = fileExists "$HOME/.gradle"
  }
  options {
    buildDiscarder logRotator( numToKeepStr: '20' )
  }
  parameters {
    string( defaultValue: '12.0.16', description: 'Jetty version to use to build SpringBoot project',
            name: 'JETTY_VERSION' )
    string( defaultValue: '4.0.9', description: 'Jetty Reactive HttpClient version to use in the build',
            name: 'JETTY_REACTIVE_HTTPCLIENT_VERSION' )    
    string( defaultValue: 'jdk21', description: 'JDK to use (jdk17,jdk21)', name: 'JDK' )
    string( defaultValue: 'main', description: 'spring-framework branch, main, 6.2.x', name: 'SPRINGFRAMEWORK_BRANCH' )
    string( defaultValue: 'spring-projects', description: 'spring-framework github org', name: 'SPRINGFRAMEWORK_ORG' )
  }
  stages {
    stage('Create Gradle home'){
      when { expression { GRADLE_HOME == 'false' } }
      steps {
        sh "mkdir $HOME/.gradle"
      }
    }
    stage("Checkout SpringFramework"){
      steps{
        stash name: 'init.gradle.spring-framework', includes: 'init.gradle.spring-framework'
        checkout([$class: 'GitSCM',
                  branches: [[name: "*/$SPRINGFRAMEWORK_BRANCH"]],
                  extensions: [[$class: 'CloneOption', depth: 1, noTags: true, shallow: true]],
                  userRemoteConfigs: [[url: 'https://github.com/$SPRINGFRAMEWORK_ORG/spring-framework.git']]])                   
      }
    }
    stage("Build SpringFramework"){
      steps{
        withEnv( ["JAVA_HOME=${tool "$jdk"}"] ) {
          configFileProvider([configFile(fileId: 'init.gradle', variable: 'INIT_GRADLE')]) {
            sh "cp $INIT_GRADLE $HOME/.gradle/init.gradle"
            unstash name: 'init.gradle.spring-framework'
            sh "./gradlew build --info --no-daemon --no-build-cache --init-script init.gradle.spring-framework -Djetty.version=${JETTY_VERSION} -Djetty.reactive.httpclient=${JETTY_REACTIVE_HTTPCLIENT_VERSION}"
          }
        }
      }
      post {
        always {
          script{
            currentBuild.description = "Build SpringFramework branch ${SPRINGFRAMEWORK_BRANCH}, Jetty Version ${JETTY_VERSION}, jdk ${jdk}"
          }
          junit '**/build/test-results/test/*.xml'
        }
      }
    }
  }
}
